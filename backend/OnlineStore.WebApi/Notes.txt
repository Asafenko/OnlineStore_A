
// ШАГ 1: Установка dotnet-ef
//Устанавливаем в систему инструмент для проектирования БД во время разработки.
//Он позволит создавать БД и миграции: dotnet tool install --global dotnet-ef

// ШАГ 2: Добавляем ef-tool к проекту
// тобы получить возможность использовать ef-tool из проекта, нужно добавить к проекту пакет: Microsoft.EntityFrameworkCore.Design

// Шаг 3: Добавляем провайдер
// Добавляем NuGet пакет с провайдером для необходимой БД. Например, Microsoft.EntityFrameworkCore.Sqlite

// ШАГ 4: Добавляем модель
// public class AppDbContext : DbContext
// {
//     //Список таблиц:
//     public DbSet<Order> Orders => Set<Order>();
//
//     public AppDbContext(
//         DbContextOptions<AppDbContext> options) 
//         : base(options)
//     {
//     }

// ШАГ 5: Регистрируем зависимость
// var dbPath = "myapp.db";
// builder.Services.AddDbContext<AppDbContext>(
// options => options.UseSqlite($"Data Source={dbPath}"));


// ШАГ 6: Создаем БД
// dotnet ef migrations add InitialCreate
// Выполните эту команду именно из папки с проектом, а не из папки с решением

//Миграция Пример : dotnet ef migrations add <MigrationName>

// ШАГ 7: Применение миграций
// Не забудьте вызвать применение миграций путем вызова команды:
//dotnet ef database update

// ШАГ 8: Внедряем зависимость
// app.MapGet("/orders", async (AppDbContext context)
// => await context.Orders.ToListAsync());




    // Get All Product
    // public async Task<IReadOnlyList<Product>> GetProducts(CancellationToken cts = default)
    // {
    //     var products = await _dbContext.Products.ToListAsync(cts);
    //     return products;
    // }
    //
    //
    // // Get By ID Product
    // public async Task<Product> GetProduct(Guid id, CancellationToken cts = default)
    // {
    //     var product = await _dbContext.Products.FirstAsync(ti => ti.Id == id, cts);
    //     return product;
    // }
    //
    //
    // // Add Product
    // public async Task AddProduct(Product product, CancellationToken cts = default)
    // {
    //     await _dbContext.Products.AddAsync(product, cts);
    //     await _dbContext.SaveChangesAsync(cts);
    // }
    //
    //
    // // Update Product 
    // public async Task UpdateProduct(Product product, CancellationToken cts = default)
    // {
    //     _dbContext.Entry(product).State = EntityState.Modified;
    //     await _dbContext.SaveChangesAsync(cts);
    // }
    //
    //
    // // Delete Product By ID
    // public async Task DeleteProduct(Guid id, CancellationToken cts = default)
    // {
    //     var product = await _dbContext.Products.FirstAsync(it => it.Id == id, cts);
    //     _dbContext.Products.Remove(product);
    //     await _dbContext.SaveChangesAsync(cts);
    // }
    //
    //
    // Delete All
    // public async Task Delete(CancellationToken cts = default)
    // {
    //     await _dbContext.Products.ExecuteDeleteAsync(cts);
    //     await _dbContext.SaveChangesAsync(cts);
    // }
    
    
    //////////////////////////////////////////////////////////////////
    
// STEP 8
//GET PRODUCTS
//  app.MapGet("/products", async ([FromServices]IAppDbContextRepository dbContext,CancellationToken cts ) =>
// {
//     var products = await dbContext.GetProducts(cts);
//     return products;
//  });
//GET PRODUCT BY ID
// app.MapGet("/product/{id:guid}", async ([FromServices]IAppDbContextRepository dbContext,Guid id,CancellationToken cts) =>
// {
//     //[FromQuery]: /product?ID=0000
//     var productId = await dbContext.GetProduct(id,cts);
//     return Results.Ok(productId);
// });
// ADD PRODUCT
// app.MapPost("/add", async (
// [FromServices]IAppDbContextRepository dbContext,[FromBody] Product product,HttpResponse response,CancellationToken cts) =>
// {
//     product.Id = new Guid();
//     await dbContext.AddProduct(product,cts);
//     response.StatusCode = StatusCodes.Status201Created;
//     return response.StatusCode;
//     //return Results.Created($"http://localhost/add/{product.Id}",null);
// });
// UPDATE PRODUCT BY ID
// app.MapPut("/product/{id:guid}", async (
// [FromServices]IAppDbContextRepository dbContext,[FromBody]Product product,[FromRoute] Guid id,CancellationToken cts) =>
// {
//     var productUP =  await dbContext.UpdateProduct(product,cts);
//     return productUP;
// });
// DELETE PRODUCT BY ID
// app.MapDelete("/product/{id:guid}",async (
// [FromServices]IAppDbContextRepository dbContext,[FromRoute] Guid id,CancellationToken cts) =>
// {
//     var product = await dbContext.DeleteProduct(id,cts);
//     return product;
// });
// DELETE
// app.MapDelete("/delete", async (
// [FromServices]IAppDbContextRepository dbContext,CancellationToken cts) =>
// {
//    await dbContext.Delete(cts);
// });